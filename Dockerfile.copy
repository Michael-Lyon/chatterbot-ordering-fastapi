ARG PYTHON_VERSION=3.11.9
FROM python:${PYTHON_VERSION} as base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# install system dependencies
RUN apt-get update \
    && apt-get -y install gcc make \
    && rm -rf /var/lib/apt/lists/*s

WORKDIR /app

COPY ./requirements.txt /app/requirements.txt

# Create a privileged user.
RUN adduser --disabled-password --gecos "" myuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
# RUN python -m pip install python-dev-tools

RUN --mount=type=cache,id=s/6b85bb6d-442d-4c14-a685-f2fc5060d9ed-/root/cache/pip,target=/root/.cache/pip \
python -m pip install -r requirements.txt



# RUN python -m pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.1.0/en_core_web_sm-2.1.0.tar.gz#egg=en_core_web_sm

# RUN python -m pip install https://github.com/explosion/spacy-models/releases/download/de_core_news_sm-2.1.0/de_core_news_sm-2.1.0.tar.gz#egg=de_core_news_sm

# Copy the source code into the container.
COPY . /app
ENV NLTK_DATA=/usr/local/nltk_data
ADD . $NLTK_DATA


RUN [ "python", "-c", "import nltk; nltk.download('all', download_dir='$NLTK_DATA')" ]


# RUN python -m pip install git+git://github.com/gunthercox/chatterbot-corpus@master#egg=chatterbot_corpus

# Switch to the privileged user.
USER myuser

# Expose the port that the application listens on.
EXPOSE 80

# Run the application.
CMD uvicorn main:app --host=0.0.0.0 --port=80
