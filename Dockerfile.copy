ARG PYTHON_VERSION=3.11.9
FROM python:${PYTHON_VERSION} as base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# install system dependencies
RUN apt-get update \
    && apt-get -y install gcc make \
    && apt-get -y install libyaml

WORKDIR /app

COPY ./requirements.txt /app/requirements.txt

# Create a privileged user.
RUN adduser --disabled-password --gecos "" myuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN python -m pip install python-dev-tools

RUN python -m pip install 'PyYAML==5.1'


RUN --mount=type=cache,id=s/a797b9c9-3408-455d-9d7a-be009ce9aa1a-/root/cache/pip,target=/root/.cache/pip \
    python -m pip install -r requirements.txt

# RUN  --mount=type=bind,source=requirements.txt,target=requirements.txt

# RUN   python -m pip install -r requirements.txt

# RUN --mount=type=cache,id=s/a797b9c9-3408-455d-9d7a-be009ce9aa1a-/root/cache/pip,target=/root/.cache/pip \
#     --mount=type=bind,source=requirements.txt,target=requirements.txt \
#     python -m pip install -r requirements.txt

RUN python -m pip install 'PyYAML==5.1'

# Copy the source code into the container.
COPY . /app
ENV NLTK_DATA=/usr/local/nltk_data
ADD . $NLTK_DATA


RUN [ "python", "-c", "import nltk; nltk.download('all', download_dir='$NLTK_DATA')" ]

# Switch to the privileged user.
USER myuser

# Expose the port that the application listens on.
EXPOSE 8000

# Run the application.
CMD uvicorn main:app --host=0.0.0.0 --port=8000
