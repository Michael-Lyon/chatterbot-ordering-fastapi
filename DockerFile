ARG PYTHON_VERSION=3.11.9
FROM python:${PYTHON_VERSION} as base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# install system dependencies
# RUN apt-get update \
#     && apt-get -y install gcc make \
#     && apt-get install python-yaml \
#     && rm -rf /var/lib/apt/lists/*s

WORKDIR /app

# Create a privileged user.
RUN adduser --disabled-password --gecos "" myuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN python -m pip install python-dev-tools


RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

RUN python -m pip install 'PyYAML==5.1'

# Copy the source code into the container.
COPY . /app
ENV NLTK_DATA=/home/myuser/nltk_data
ADD . $NLTK_DATA


RUN [ "python", "-c", "import nltk; nltk.download('all')" ]
RUN [ "python", "-c", "import nltk; nltk.download('averaged_perceptron_tagger')" ]

# Switch to the privileged user.
USER myuser

# Expose the port that the application listens on.
EXPOSE 10000

# Install OpenJDK-8
RUN apt-get update && \
    apt-get install -y openjdk-8-jdk && \
    apt-get install -y ant && \
    apt-get clean;

# Fix certificate issues
RUN apt-get update && \
    apt-get install ca-certificates-java && \
    apt-get clean && \
    update-ca-certificates -f;

# Setup JAVA_HOME -- useful for docker commandline
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/
RUN export JAVA_HOME


# Run the application.
CMD uvicorn main:app --host=0.0.0.0 --port=10000
